type User {
  _id: ID!
  name: String!
  email: String!
  password: String
  jwt: String
  bookmarks: [Bookmark]
}

type Spot {
  _id: ID!
  name: String
  owner: User
  description: String
  bookmarks: [Bookmark]
  images: [Image]
  location: Location
  kickout_level: Int
}

type Bookmark{
  _id: ID!
  user: User
  spot: Spot
}

type Image {
  _id: ID!
  public_url: String
  base64: String
  createdAt: String!
}

type Location {
  _id: ID!
  latitude: String
  longitude: String
}

input bookmarkInputData {
  user: String!
  spot: String!
}

input LocationInput {
  latitude: String
  longitude: String
}

input ImageInputData {
  base64: String
}

input userInputData {
  email: String!
  name: String!
  password: String!
}

input spotInputData {
  name: String
  location: LocationInput
  images: [ImageInputData]
  description: String
  kickout_level: Int
  owner: String
}

type RootQuery {
  getUsers: [User]
  getSpots: [Spot]
}

type RootMutation {
  createUser(userInput: userInputData): User!
  createSpot(spotInput: spotInputData): Spot!
  createBookmark(bookmarkInput: bookmarkInputData): Bookmark!
  deleteBookmark(_id: ID!): String!
  deleteSpot(_id: ID!): String!
  deleteUser(_id: ID!): String!
}

schema {
  query: RootQuery
  mutation: RootMutation
}