type User {
  _id: ID!
  name: String!
  email: String!
  password: String!
  bookmarks: [Spot]
  spots: [Spot]
  push_token: String
}

type AuthData {
  token: String!
  user_id: String!
  email: String!
  name: String!
  errorMsg: String
  hasError: Boolean
  push_token: String
  bookmarks: [Spot]
}


type Spot {
  _id: ID!
  name: String!
  owner: User!
  description: String!
  images: [Image]!
  location: Location!
  kickout_level: Int!
  approved: Boolean
  spotType: String!
  contains: [String]!
  distance: Float
  createdAt: String
}

type Image {
  _id: ID!
  public_url: String
  base64: String
  createdAt: String!
}

type Location {
  _id: ID!
  latitude: Float
  longitude: Float
}

input bookmarkInputData {
  user_id: String
  spot_id: String
}

input LocationInput {
  latitude: Float
  longitude: Float
}

input ImageInputData {
  base64: String
}

input userInputData {
  email: String!
  name: String!
  password: String!
  push_token: String!
}

input spotInputData {
  name: String!
  location: LocationInput!
  images: [ImageInputData]!
  description: String!
  kickout_level: Int
  owner: String
  spotType: String!
  contains: [String]!
}

type RootQuery {
  getUsers: [User]
  getBookmarks(user_id: ID!): [Spot]
  getSpots(locationInput: LocationInput): [Spot]
  getUser(user_id: ID!): User
  getUserCreatedSpots(locationInput: LocationInput!): [Spot]
  getUserBookmarkedSpots(user_id: ID!): [User]
  getNotApprovedList: [Spot]
}

type RootMutation {
  login(email: String!, password: String!): AuthData!
  createUser(userInput: userInputData): AuthData!
  createSpot(spotInput: spotInputData): Spot!
  createBookmark(bookmarkInput: bookmarkInputData): [Spot]
  deleteBookmark(bookmarkInput: bookmarkInputData): [Spot]
  deleteSpot(_id: ID!): String!
  deleteUser(_id: ID!): User!
  approveSpotMutation(_id: ID!): String!
}

schema {
  query: RootQuery
  mutation: RootMutation
}