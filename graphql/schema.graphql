type User {
  _id: ID!
  name: String!
  email: String!
  password: String!
  jwt: String
  bookmarks: [Spot]
}

type AuthData {
  token: String!
  user_id: String!
  email: String!
  name: String!
  errorMsg: String
  hasError: Boolean
}

type Spot {
  _id: ID!
  name: String
  owner: User
  description: String
  images: [Image]
  location: Location
  kickout_level: Int
}

type Image {
  _id: ID!
  public_url: String
  base64: String
  createdAt: String!
}

type Location {
  _id: ID!
  latitude: String
  longitude: String
}

input bookmarkInputData{
   user_id: String
   spot_id: String
}

input LocationInput {
  latitude: String
  longitude: String
}

input ImageInputData {
  base64: String
}

input userInputData {
  email: String!
  name: String!
  password: String!
}

input spotInputData {
  name: String
  location: LocationInput
  images: [ImageInputData]
  description: String
  kickout_level: Int
  owner: String
}

type RootQuery {
  getUsers: [User]
  getSpots: [Spot]
}

type RootMutation {
  login(email: String!, password: String!): AuthData!
  createUser(userInput: userInputData): User!
  createSpot(spotInput: spotInputData): Spot!
  createBookmark(bookmarkInput: bookmarkInputData): Spot!
  deleteBookmark(bookmarkInput: bookmarkInputData): User!
  deleteSpot(_id: ID!): String!
  deleteUser(_id: ID!): String!
  getUserCreatedSpots(user_id: ID!): [Spot]
  getUser(user_id: ID!): User
}

schema {
  query: RootQuery
  mutation: RootMutation
}